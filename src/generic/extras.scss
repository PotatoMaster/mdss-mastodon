@mixin generic-extras {
  // Numbered Elements
  @if $enable-auto-numbering {
    $counters: "";

    $level: 1;
    @while $level <= length($auto-numbering-headings) {
      $heading: nth($auto-numbering-headings, $level);
      $counters: #{$counters} #{$heading};

      $counter-resets: "";
      @if $level < length($auto-numbering-headings) {
        @for $i from $level + 1 through length($auto-numbering-headings) {
          $counter-resets: #{$counter-resets} #{nth($auto-numbering-headings, $i)};
        }
      }

      $label: "";
      @for $i from 1 through $level {
        $label: #{$label} counter(#{nth($auto-numbering-headings, $i)});
        @if ($i != $level) {
          $label: #{$label} '"."';
        } @else {
          $label: #{$label} '"\00a0"';
        }
      }

      #{$heading} {
        counter-increment: #{$heading};
        counter-reset: #{$counter-resets};
      }

      #{$heading}::before {
        @include to-left-margin {
          content: #{$label};
        }
      }

      $level: $level + 1;
    }

    @each $element in $auto-numbering-elements {
      $counters: #{$counters} #{$element};

      #{$element} {
        position: relative;
        counter-increment: #{$element};
      }

      #{$element}::before {
        @include to-right-margin {
          content: "(" counter(#{$element}) ")";
        }
      }
    }

    @include on-root {
      counter-reset: #{$counters};
    }
  }

  // Tables
  table {
    border-collapse: collapse;
    margin: $paragraph-margin auto;

    thead {
      $last-heading: length($heading-font-size);
      @include font($heading-font);
      @include font-color(nth($heading-font-color, $last-heading));
      @include font-size(nth($heading-font-size, $last-heading));
      @include font-weight(nth($heading-font-weight, $last-heading));

      color: $color-primary;
      border-bottom: solid $color-primary $border-width;
      font-weight: bold;
      text-transform: uppercase;
    }

    th,
    td {
      font-weight: inherit;
      padding: $spacing-200 $spacing-400;
      text-align: left;
    }

    tr:nth-child(even) {
      background: $tables-stripe-background;
    }
  }

  // Definition Lists
  dt {
    display: block;
    font-weight: bold;
  }

  dd {
    display: block;
    margin-left: $spacing-700;
  }

  // Strikethrough
  del {
    background: lighter($color-red, 3);
    border-radius: $border-radius;
    color: darker($color-red, 3);
    padding: 0 $spacing-200;
    text-decoration: line-through;
  }

  // Insert
  ins {
    background: lighter($color-green, 3);
    border-radius: $border-radius;
    color: darker($color-green, 3);
    padding: 0 $spacing-200;
    text-decoration: none;
  }

  // Highlight
  mark {
    background: lighter($color-accent, 3);
    border-radius: $border-radius;
    color: darker($color-accent, 3);
    padding: 0 $spacing-200;
  }

  // Left and Right Aligned Containers
  .aligned {
    overflow: hidden;
  }

  .left.aligned,
  .left.aligned p {
    text-align: left;
  }

  .right.aligned,
  .right.aligned p {
    text-align: right;
  }

  .center.aligned,
  .center.aligned p {
    text-align: center;
  }

  // Left and Right Floated Containers
  .left.floated {
    float: left;
    margin-right: $spacing-500;
  }

  .right.floated {
    float: right;
    margin-left: $spacing-500;
  }

  // Flex Containers
  .flex {
    @include flex;

    .evenly.aligned {
      justify-content: space-evenly;
    }
  }

  // Columns
  $column-spacing: 2 * $spacing-300;

  .columns {
    @include flex;

    & > * {
      box-sizing: border-box;
      display: block;
      margin-left: 0;
      margin-right: 0;
      width: 100%;
    }
  }

  // Medium
  @media (min-width: $breakpoint-small) and (max-width: $breakpoint-large - 1) {
    $column-count: 2;
    @while $column-count <= $container-columns-max {
      $actual-column-count: $column-count;

      @if ($column-count > 2) {
        $actual-column-count: ceil($column-count / 2);
      }

      .#{number($column-count)}.columns > * {
        width: column-width($actual-column-count, $column-spacing);
      }

      $column-count: $column-count + 1;
    }
  }

  // Large
  @media (min-width: $breakpoint-large) {
    $column-count: 2;
    @while $column-count <= $container-columns-max {
      .#{number($column-count)}.columns > * {
        width: column-width($column-count, $column-spacing);
      }

      $column-count: $column-count + 1;
    }
  }

  // Custom Containers (Cards)
  .card {
    border: solid transparent $border-width;
    border-radius: $border-radius;
    break-inside: avoid;
    margin-bottom: $paragraph-margin;
    margin-top: $paragraph-margin;
    overflow: hidden;
    padding: $spacing-500 $spacing-700;
    page-break-inside: avoid;

    :first-child {
      margin-top: 0;
    }

    :last-child {
      margin-bottom: 0;
    }

    &.outline {
      border-color: $root-font-color;
      color: $root-font-color;
    }
  }

  @each $name, $color in $container-card-list {
    .#{$name}.outline.card {
      border-color: $color;
    }

    .#{$name}.card:not(.outline) {
      @include background($color);

      @if lightness($color) > 50 {
        // light background
        @if lightness($root-font-color) > 50 {
          color: $color-black;
        } @else {
          color: $root-font-color;
        }
      } @else {
        // dark background
        @if lightness($root-font-color) > 50 {
          color: $root-font-color;
        } @else {
          color: $color-white;
        }
      }
    }
  }

  // Syntax Highlighting
  @if $enable-syntax-highlighting {
    pre code {
      @each $selector, $color in $syntax-highlighting-colors {
        #{$selector} {
          color: #{$color};
        }
      }
    }
  }
}
