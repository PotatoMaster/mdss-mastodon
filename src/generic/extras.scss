@import "helpers/components";

@mixin generic-extras {
  // Numbered Elements
  $counters: "";

  $level: 1;
  @while $level <= length($numbered-headings) {
    $heading: nth($numbered-headings, $level);
    $counters: #{$counters} #{$heading};

    $counter-resets: "";
    @if $level < length($numbered-headings) {
      @for $i from $level + 1 through length($numbered-headings) {
        $counter-resets: #{$counter-resets} #{nth($numbered-headings, $i)}
      }
    }

    $label: "";
    @for $i from 1 through $level {
      $label: #{$label} counter(#{nth($numbered-headings, $i)});
      @if ($i != $level) {
        $label: #{$label} '"."'
      } @else {
        $label: #{$label} '"\00a0"'
      }
    }

    #{$heading} {
      position: relative;
      counter-increment: #{$heading};
      counter-reset: #{$counter-resets};
    }

    #{$heading}:before {
      @include to-left-margin {
        content: #{$label};
      }
    }

    $level: $level + 1;
  }

  @each $element in $numbered-elements {
    $counters: #{$counters} #{$element};

    #{$element} {
      position: relative;
      counter-increment: #{$element};
    }

    #{$element}:before {
      @include to-right-margin {
        content: "(" counter(#{$element}) ")";
      }
    }
  }

  @include on-root {
    counter-reset: #{$counters};
  }

  // Tables
  @if $use-table == true {
    table {
      margin: $spacing-medium 0;

      thead {
        border-bottom: solid $root-font-color 1px;
        font-family: $heading-font;
      }
  
      th, td {
        padding: $spacing-small $spacing-medium;
      }
    }
  }

  // Definition Lists
  @if $use-definition-list == true {
    dd {
      margin-left: $spacing-huge;
    }
  }

  // Sticky Containers
  @if $use-container-sticky == true {
    .sticky {
      background: $root-background;
      padding: $spacing-medium 0;
    }
  }

  // Left and Right Aligned Containers
  @if $use-container-float == true {
    .left {
      margin-right: $spacing-medium;
    }

    .right {
      margin-left: $spacing-medium;
    }
  }

  // Custom Containers (Cards)
  @each $name, $color in $container-custom {
    .#{$name} {
      @include card(
        $root-font,
        $root-font-size,
        $root-font-color,
        desaturate(lighten($color, 45%), 25%),
        $color
      );
    }
  }

  @each $name, $color in $container-custom-inverted {
    .#{$name} {
      @include card(
        $root-font,
        $root-font-size,
        $color-white,
        $color,
        $color
      );
    }
  }
}